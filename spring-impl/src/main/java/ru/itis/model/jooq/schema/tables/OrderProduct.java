/*
 * This file is generated by jOOQ.
 */
package ru.itis.model.jooq.schema.tables;


import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ru.itis.model.jooq.schema.Keys;
import ru.itis.model.jooq.schema.Public;
import ru.itis.model.jooq.schema.tables.records.OrderProductRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OrderProduct extends TableImpl<OrderProductRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.order_product</code>
     */
    public static final OrderProduct ORDER_PRODUCT = new OrderProduct();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OrderProductRecord> getRecordType() {
        return OrderProductRecord.class;
    }

    /**
     * The column <code>public.order_product.order_product_id</code>.
     */
    public final TableField<OrderProductRecord, UUID> ORDER_PRODUCT_ID = createField(DSL.name("order_product_id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("uuid_generate_v4()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.order_product.order_id</code>.
     */
    public final TableField<OrderProductRecord, UUID> ORDER_ID = createField(DSL.name("order_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.order_product.product_id</code>.
     */
    public final TableField<OrderProductRecord, UUID> PRODUCT_ID = createField(DSL.name("product_id"), SQLDataType.UUID.nullable(false), this, "");

    private OrderProduct(Name alias, Table<OrderProductRecord> aliased) {
        this(alias, aliased, null);
    }

    private OrderProduct(Name alias, Table<OrderProductRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.order_product</code> table reference
     */
    public OrderProduct(String alias) {
        this(DSL.name(alias), ORDER_PRODUCT);
    }

    /**
     * Create an aliased <code>public.order_product</code> table reference
     */
    public OrderProduct(Name alias) {
        this(alias, ORDER_PRODUCT);
    }

    /**
     * Create a <code>public.order_product</code> table reference
     */
    public OrderProduct() {
        this(DSL.name("order_product"), null);
    }

    public <O extends Record> OrderProduct(Table<O> child, ForeignKey<O, OrderProductRecord> key) {
        super(child, key, ORDER_PRODUCT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<OrderProductRecord> getPrimaryKey() {
        return Keys.ORDER_PRODUCT_PKEY;
    }

    @Override
    public List<ForeignKey<OrderProductRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ORDER_PRODUCT__ORDER_PRODUCT_ORDER_ENTITY_ORDER_ID_FK, Keys.ORDER_PRODUCT__ORDER_PRODUCT_PRODUCT_ENTITY_PRODUCT_ID_FK);
    }

    private transient OrderEntity _orderEntity;
    private transient ProductEntity _productEntity;

    /**
     * Get the implicit join path to the <code>public.order_entity</code> table.
     */
    public OrderEntity orderEntity() {
        if (_orderEntity == null)
            _orderEntity = new OrderEntity(this, Keys.ORDER_PRODUCT__ORDER_PRODUCT_ORDER_ENTITY_ORDER_ID_FK);

        return _orderEntity;
    }

    /**
     * Get the implicit join path to the <code>public.product_entity</code>
     * table.
     */
    public ProductEntity productEntity() {
        if (_productEntity == null)
            _productEntity = new ProductEntity(this, Keys.ORDER_PRODUCT__ORDER_PRODUCT_PRODUCT_ENTITY_PRODUCT_ID_FK);

        return _productEntity;
    }

    @Override
    public OrderProduct as(String alias) {
        return new OrderProduct(DSL.name(alias), this);
    }

    @Override
    public OrderProduct as(Name alias) {
        return new OrderProduct(alias, this);
    }

    @Override
    public OrderProduct as(Table<?> alias) {
        return new OrderProduct(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public OrderProduct rename(String name) {
        return new OrderProduct(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OrderProduct rename(Name name) {
        return new OrderProduct(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public OrderProduct rename(Table<?> name) {
        return new OrderProduct(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<UUID, UUID, UUID> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super UUID, ? super UUID, ? super UUID, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super UUID, ? super UUID, ? super UUID, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
