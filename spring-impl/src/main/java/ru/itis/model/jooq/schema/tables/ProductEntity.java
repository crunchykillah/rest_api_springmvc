/*
 * This file is generated by jOOQ.
 */
package ru.itis.model.jooq.schema.tables;


import java.math.BigDecimal;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ru.itis.model.jooq.schema.Keys;
import ru.itis.model.jooq.schema.Public;
import ru.itis.model.jooq.schema.tables.records.ProductEntityRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProductEntity extends TableImpl<ProductEntityRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.product_entity</code>
     */
    public static final ProductEntity PRODUCT_ENTITY = new ProductEntity();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProductEntityRecord> getRecordType() {
        return ProductEntityRecord.class;
    }

    /**
     * The column <code>public.product_entity.product_id</code>.
     */
    public final TableField<ProductEntityRecord, UUID> PRODUCT_ID = createField(DSL.name("product_id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("uuid_generate_v4()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.product_entity.name</code>.
     */
    public final TableField<ProductEntityRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.product_entity.price</code>.
     */
    public final TableField<ProductEntityRecord, BigDecimal> PRICE = createField(DSL.name("price"), SQLDataType.NUMERIC, this, "");

    private ProductEntity(Name alias, Table<ProductEntityRecord> aliased) {
        this(alias, aliased, null);
    }

    private ProductEntity(Name alias, Table<ProductEntityRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.product_entity</code> table reference
     */
    public ProductEntity(String alias) {
        this(DSL.name(alias), PRODUCT_ENTITY);
    }

    /**
     * Create an aliased <code>public.product_entity</code> table reference
     */
    public ProductEntity(Name alias) {
        this(alias, PRODUCT_ENTITY);
    }

    /**
     * Create a <code>public.product_entity</code> table reference
     */
    public ProductEntity() {
        this(DSL.name("product_entity"), null);
    }

    public <O extends Record> ProductEntity(Table<O> child, ForeignKey<O, ProductEntityRecord> key) {
        super(child, key, PRODUCT_ENTITY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<ProductEntityRecord> getPrimaryKey() {
        return Keys.PRODUCT_ENTITY_PKEY;
    }

    @Override
    public ProductEntity as(String alias) {
        return new ProductEntity(DSL.name(alias), this);
    }

    @Override
    public ProductEntity as(Name alias) {
        return new ProductEntity(alias, this);
    }

    @Override
    public ProductEntity as(Table<?> alias) {
        return new ProductEntity(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ProductEntity rename(String name) {
        return new ProductEntity(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProductEntity rename(Name name) {
        return new ProductEntity(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProductEntity rename(Table<?> name) {
        return new ProductEntity(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<UUID, String, BigDecimal> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super UUID, ? super String, ? super BigDecimal, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super UUID, ? super String, ? super BigDecimal, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
